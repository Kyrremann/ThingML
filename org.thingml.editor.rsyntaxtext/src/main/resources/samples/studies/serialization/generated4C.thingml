import "../../core/comm.thingml"
import "../../core/serializer.thingml"
import "../../core/timer.thingml"
import "../../core/_arduino/comm.thingml"
import "../../core/_arduino/serializer.thingml"
import "../../core/_arduino/timer.thingml"

import "./messages.thingml"

//test thing
thing TestThing includes testMsgs, TimerClient
{
    
    property counter : Integer = 0
    property delay : Integer = 1000
    
    required port out {
       sends m1, m2
    }
    
    provided port in {
       receives m1, m2
    }
    
    statechart behavior init default {
        state default {
            on entry timer!timer_start(delay)
            
            transition sendMsgs -> default
            event timer?timer_timeout
            action do
                //out!m1()
                if (counter < 1024)
                    counter = counter + 1
                if (counter == 1024)
                    counter = 0
                out!m2(125)//125 = 0x7D = escape byte     
            end
            
            internal event in?m1
            action do
                out!m2(18)
            end
        }   
    }
}

thing fragment RemoteMsgs includes testMsgs{
//message m1();//code=27
//message m2(i : Integer);//code=1
//message m3(s : String);//code=2
//message m4(i : Integer, s : String);//code=12
}

thing MessageSerializer includes SerializerArduino, RemoteMsgs {
provided port out{
receives m1, m2
}

statechart SerializerBehavior init Serialize {
state Serialize{
internal event m : out?m1 action
do
setHeader(1, 0)
send()
end

internal event m : out?m2 action
do
setHeader(2, lengthInteger)
serializeInteger(m.i)
send()
end
}
}

}

thing MessageDeserializer includes DeserializerArduino, RemoteMsgs {
required port in{
sends m1, m2
}

function forward() do
index = DATA_POSITION
readonly var code : Byte = buffer[CODE_POSITION]
if (code == 1) do
deserializeM1()
end
end

function deserializeM1()
do
in!m1()
end

function deserializeM2()
do
readonly var i : Integer = deserializeInteger()
in!m2(i)
end

statechart receive init Idle {
state Idle {
on entry index = 0
transition -> ReceiveMessage event m : network?receive_byte
guard m.b == START_BYTE
}
state ReceiveMessage {
transition -> Escape event m : network?receive_byte
guard m.b == ESCAPE_BYTE
internal event m : network?receive_byte
guard not (m.b == ESCAPE_BYTE or m.b == STOP_BYTE)
action storeByte(m.b)
transition -> Idle event m : network?receive_byte
guard m.b == STOP_BYTE
action forward()
internal event m : network?receive_byte
guard m.b == START_BYTE // Should not happen with a reliable channel
action index = 0 // Reset if it happens (some bytes have been lost at some point)
}
state Escape {
transition receive -> ReceiveMessage
event m : network?receive_byte
action storeByte(m.b)
}
}

}

configuration test 
@remote "testRemote::TestThing::.*::.*"
@debug "false"
@debug_fifo "true"
@debug_message_receive "^((?!poll).)*$"//all except *poll*
@debug_message_send "^((?!poll).)*$"//all except *poll*
{   
    instance test : TestThing
    instance timer : TimerArduino
    
    //Messages are serialized, sent to network, received, deserialized and sent to the former thing
    instance network : SerialArduino
    instance serializer : MessageSerializer
    instance deserializer : MessageDeserializer 
    
    connector serializer.network => network.IOStream
    connector deserializer.network => network.IOStream
    connector test.timer => timer.timer
    connector test.out => serializer.out
    connector deserializer.in => test.in  
}