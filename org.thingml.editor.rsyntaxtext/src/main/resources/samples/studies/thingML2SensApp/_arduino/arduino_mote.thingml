import "../../../hardware/devices/_arduino/lcd_screen_sensor_disp.thingml"
import "../../../hardware/bricks/_arduino/temperature_sensor.thingml"
import "../../../hardware/bricks/_arduino/rotation_sensor.thingml"
import "../../../hardware/bricks/_arduino/light_sensor.thingml"
import "../../../hardware/bricks/_arduino/led.thingml"
import "../../../hardware/bricks/_arduino/button.thingml"

import "../../../core/serializer.thingml"
import "../../../core/_arduino/serializer.thingml"
import "../../../core/_arduino/comm.thingml"

import "../thingml2sensapp.thingml"

thing SensorsDisplay includes RemoteMonitoringMsgs,
LcdScreenMsgs, TimerClient,
RotationSensorClient, TemperatureSensorClient, LightSensorClient,
LedClient, ButtonClient
{		
	readonly property tempDisplay : UInt8 = 0
	readonly property potDisplay : UInt8 = 1
    readonly property lightDisplay : UInt8 = 2
    
    property temp : UInt16
    property light : UInt16
    property rotation : UInt16
    
    readonly property period : UInt16 = 2000
	
	required port Display @sync_send "true"
    {	
		sends initDisplay, refreshDisplay, setDisplay
	}

    provided port RemoteControl @sync_send "true"
    {
        receives remote_turnOn, remote_turnOff, remote_changeDisplay
        sends report_temperature, report_light, report_rotation    
    }
	
   	statechart SensorsDisplayImpl init Pot
   	{
   		on entry do
            Display!initDisplay (potDisplay, "Position", "", 0, 0, 1023)
        	Display!initDisplay (tempDisplay, "Temperature", "C", 25, 20, 30)  
            Display!initDisplay (lightDisplay, "Light", "", 0, 0, 1023)
            timer!timer_start(period)
        end
        
        internal event timer?timer_timeout
        action do
            timer!timer_start(period)
            Led!led_toggle()
            RemoteControl!report_temperature(temp)
            RemoteControl!report_light(light)
            RemoteControl!report_rotation(rotation*46/10000)//gives approximately the value in radians
            Led!led_toggle()
        end
   	    
   	    internal event m : TemperatureSensor?temperature_value
        action do
            Display!refreshDisplay (tempDisplay, m.val)
            temp = m.val
        end
        
   	    internal event m : LightSensor?light_value
        action do
            Display!refreshDisplay (lightDisplay, m.val)
            light = m.val        
        end
        	
        internal event m : RotationSensor?rotation_value
        action do
            Display!refreshDisplay (potDisplay, m.val)
            rotation = m.val
        end

        internal event m : RemoteControl?remote_turnOn
        action Led!led_on()
        
        internal event m : RemoteControl?remote_turnOff
        action Led!led_off()
                	
   	    state Temp
        {		
        	on entry Display!setDisplay (tempDisplay)
        	
        	transition switch -> Pot
        	event Button?press
            event RemoteControl?remote_changeDisplay
        }
        
        state Pot
        {		
        	on entry Display!setDisplay (potDisplay)
        
        	transition switch -> Light
        	event Button?press
            event RemoteControl?remote_changeDisplay
        }
        
        state Light
        {		
        	on entry Display!setDisplay (lightDisplay)
        
        	transition switch -> Temp
        	event Button?press
            event RemoteControl?remote_changeDisplay
        }
        
   	}
   
}








thing fragment RemoteMsgs includes RemoteMonitoringMsgs{
//message report_rotation(t : UInt16);//code=12
//message remote_changeDisplay();//code=20
//message remote_turnOn();//code=21
//message report_light(t : UInt16);//code=11
//message remote_turnOff();//code=22
//message report_temperature(t : UInt16);//code=10
}

thing MessageSerializer includes SerializerArduino, RemoteMsgs {
required port RemoteControl{
receives report_temperature, report_light, report_rotation
}

statechart SerializerBehavior init Serialize {
state Serialize{
internal event m : RemoteControl?report_light action
do
setHeader(11, lengthUInt16)
serializeUInt16(m.light)
send()
end

internal event m : RemoteControl?report_rotation action
do
setHeader(12, lengthUInt16)
serializeUInt16(m.angle)
send()
end

internal event m : RemoteControl?report_temperature action
do
setHeader(10, lengthUInt16)
serializeUInt16(m.temp)
send()
end

}
}

}

thing MessageDeserializer includes DeserializerArduino, RemoteMsgs {
required port RemoteControl{
sends remote_turnOn, remote_turnOff, remote_changeDisplay
}

function forward() do
index = DATA_POSITION
readonly var code : Byte = buffer[CODE_POSITION]
if (code == 20) do
deserializeRemote_changeDisplay()
end
if (code == 22) do
deserializeRemote_turnOff()
end
if (code == 21) do
deserializeRemote_turnOn()
end
end

function deserializeRemote_changeDisplay()
do
RemoteControl!remote_changeDisplay()
end

function deserializeRemote_turnOff()
do
RemoteControl!remote_turnOff()
end

function deserializeRemote_turnOn()
do
RemoteControl!remote_turnOn()
end

statechart receive init Idle {
state Idle {
on entry index = 0
transition -> ReceiveMessage event m : network?receive_byte
guard m.b == START_BYTE
}
state ReceiveMessage {
transition -> Escape event m : network?receive_byte
guard m.b == ESCAPE_BYTE
internal event m : network?receive_byte
guard not (m.b == ESCAPE_BYTE or m.b == STOP_BYTE)
action storeByte(m.b)
transition -> Idle event m : network?receive_byte
guard m.b == STOP_BYTE
action forward()
internal event m : network?receive_byte
guard m.b == START_BYTE // Should not happen with a reliable channel
action index = 0 // Reset if it happens (some bytes have been lost at some point)
}
state Escape {
transition receive -> ReceiveMessage
event m : network?receive_byte
action storeByte(m.b)
}
}

}












configuration TempSensorDisplay
@remote "app::.*::RemoteControl::.*"
{
	// Light sensor configuration.
	group light_sensor : LightSensorArduino
		set light_sensor.io.analog_input.pin = AnalogPin:A_1

	// Temperature sensor configuration.
	group temp_sensor : TemperatureSensorArduino
		set temp_sensor.io.analog_input.pin = AnalogPin:A_3

	// Rotation sensor configuration.
	group rot_sensor : RotationSensorArduino
		set rot_sensor.io.analog_input.pin = AnalogPin:A_5
	
	// Led device configuration.
	group led : LedArduino
		set led.io.digital_output.pin = DigitalPin:PIN_9
	
    // Button device configuration.
	group button : ButtonArduino
		set button.io.digital_input.pin = DigitalPin:PIN_8

    // Screen declaration.
	instance screen : LcdScreen

    // Application configuration.
	instance app : SensorsDisplay
    instance timer : TimerArduino
	connector app.Display => screen.Display
	connector app.TemperatureSensor => temp_sensor.temperature_sensor.TemperatureSensor
    connector app.LightSensor => light_sensor.light_sensor.LightSensor
    connector app.RotationSensor => rot_sensor.rotation_sensor.RotationSensor
    connector app.Button => button.button.Button
    connector app.Led => led.led.Led
    connector app.timer => timer.timer

    //Serialization
    instance serializer : MessageSerializer
    instance deserializer : MessageDeserializer
    instance network : SerialArduino
    connector serializer.network => network.IOStream
    connector serializer.RemoteControl => app.RemoteControl
    connector deserializer.network => network.IOStream
    connector deserializer.RemoteControl => app.RemoteControl
}