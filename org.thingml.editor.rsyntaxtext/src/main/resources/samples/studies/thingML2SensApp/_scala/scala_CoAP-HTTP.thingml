import "../../../core/_scala/serializer.thingml"
import "../../../core/serializer.thingml"
import "../../../core/comm.thingml"
import "../../../core/_scala/comm.thingml"

import "../thingml2sensapp.thingml"


//test thing
thing RemoteMonitoringStub includes RemoteMonitoringMsgs
@mock "true"
{
    provided port RemoteControl
    {
        sends remote_turnOn, remote_turnOff, remote_changeDisplay
        receives remote_turnOn, remote_turnOff, remote_changeDisplay
        receives report_temperature, report_light, report_rotation    
    }
	     
}







thing fragment RemoteMsgs includes RemoteMonitoringMsgs{
//message remote_changeDisplay();//code=20
//message report_rotation(t : UInt16);//code=12
//message remote_turnOff();//code=22
//message report_light(t : UInt16);//code=11
//message remote_turnOn();//code=21
//message report_temperature(t : UInt16);//code=10
}

thing MessageSerializer includes SerializerScala, RemoteMsgs {
required port RemoteControl{
receives remote_turnOn, remote_turnOff, remote_changeDisplay
}

statechart SerializerBehavior init Serialize {
state Serialize{
internal event m : RemoteControl?remote_changeDisplay action
do
setHeader(20, 0)
send()
end

internal event m : RemoteControl?remote_turnOff action
do
setHeader(22, 0)
send()
end

internal event m : RemoteControl?remote_turnOn action
do
setHeader(21, 0)
send()
end

}
}

}

thing MessageDeserializer includes DeserializerScala, ArraySerializer, RemoteMsgs {
required port RemoteControl{
sends report_temperature, report_light, report_rotation
}

function forward() do
index = DATA_POSITION
readonly var code : Byte = buffer[CODE_POSITION]
if (code == 11) do
deserializeReport_light()
end
if (code == 12) do
deserializeReport_rotation()
end
if (code == 10) do
deserializeReport_temperature()
end
end

function deserializeReport_light()
do
readonly var t : UInt16 = deserializeUInt16()
RemoteControl!report_light(t)
out!write_bytes(escape())
end

function deserializeReport_rotation()
do
readonly var t : UInt16 = deserializeUInt16()
RemoteControl!report_rotation(t)
out!write_bytes(escape())
end

function deserializeReport_temperature()
do
readonly var t : UInt16 = deserializeUInt16()
RemoteControl!report_temperature(t)
out!write_bytes(escape())
end

statechart receive init Idle {
state Idle {
internal event m : in?receive_bytes
action receive(m.b)
}
}

}


thing MessageDeserializer2 includes DeserializerScala, ArraySerializer, RemoteMsgs {
required port RemoteControl{
sends remote_turnOn, remote_turnOff, remote_changeDisplay
}

function forward() do
index = DATA_POSITION
readonly var code : Byte = buffer[CODE_POSITION]
if (code == 20) do
deserializeRemote_changeDisplay()
end
if (code == 22) do
deserializeRemote_turnOff()
end
if (code == 21) do
deserializeRemote_turnOn()
end
end

function deserializeRemote_changeDisplay()
do
RemoteControl!remote_changeDisplay()
out!write_bytes(escape())
end

function deserializeRemote_turnOff()
do
RemoteControl!remote_turnOff()
out!write_bytes(escape())
end

function deserializeRemote_turnOn()
do
RemoteControl!remote_turnOn()
out!write_bytes(escape())
end

statechart receive init Idle {
state Idle {
internal event m : in?receive_bytes
action receive(m.b)
}
}

}










configuration CoAPHTTPTempSensorDisplay
@remote "stub::.*::RemoteControl::.*"
{
    instance stub : RemoteMonitoringStub
    
    instance serializer : MessageSerializer//ThingML messages to byte[]
    instance deserializer : MessageDeserializer//byte[] to ThingML messages
    instance deserializer2 : MessageDeserializer2//byte[] to ThingML messages
    
    instance serial : SerialScala

    instance coapServer : CoAPServerScala
    instance coapClient : CoAPClientScala
    
    //Telemetry: Serial -> CoAP (-> SensApp)
    connector deserializer.in => serial.IOStream
    connector deserializer.out => coapClient.IOStream
    connector deserializer.RemoteControl => stub.RemoteControl
    
    //Remote control: (SensApp ->) CoAP -> Serial
    connector deserializer2.in => coapServer.IOStream
    connector deserializer2.out => serial.IOStream
    connector deserializer2.RemoteControl => stub.RemoteControl
    
    connector serializer.out => serial.IOStream
    connector serializer.RemoteControl => stub.RemoteControl
}


/*configuration SerialTempSensorDisplay
@remote "stub::.*::RemoteControl::.*"
{
    instance stub : RemoteMonitoringStub
    //instance deserializer : MessageDeserializer
    instance serializer : MessageSerializer
    instance serial : SerialScala
    
    //connector deserializer.network => serial.IOStream
    //connector deserializer.RemoteControl => stub.RemoteControl
    connector serializer.network => serial.IOStream
    connector serializer.RemoteControl => stub.RemoteControl
}*/