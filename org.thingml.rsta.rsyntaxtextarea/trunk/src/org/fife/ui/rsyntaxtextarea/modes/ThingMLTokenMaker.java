/* The following code was generated by JFlex 1.4.3 on 10/1/12 3:41 PM */

/*
 * 16/05/2012
 *
 * ThingMLTokenMaker.java - Scanner for the Java programming language.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for the ThingML programming language.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated JavaTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.5
 *
 */

public class ThingMLTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 6;
  public static final int DOCCOMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\23\1\11\1\0\1\23\1\20\22\0\1\23\1\53\1\16"+
    "\1\21\1\22\1\53\1\55\1\10\2\77\1\25\1\46\1\45\1\34"+
    "\1\35\1\24\1\4\1\5\2\17\4\7\2\3\1\56\1\45\1\47"+
    "\1\50\1\52\1\54\1\76\1\6\1\27\1\6\1\67\1\33\1\32"+
    "\5\1\1\26\5\1\1\74\5\1\1\31\2\1\1\77\1\12\1\77"+
    "\1\51\1\2\1\0\1\41\1\30\1\63\1\61\1\40\1\15\1\72"+
    "\1\57\1\65\1\1\1\75\1\42\1\66\1\14\1\60\1\62\1\100"+
    "\1\37\1\43\1\36\1\13\1\71\1\70\1\64\1\73\1\1\1\101"+
    "\1\51\1\44\1\54\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\2\3\1\4\1\5\1\2\1\6"+
    "\1\1\1\7\3\10\6\2\1\11\1\2\5\10\1\2"+
    "\1\12\1\13\1\14\5\13\1\15\10\13\1\16\3\13"+
    "\1\1\2\17\1\20\1\3\1\17\1\20\2\17\1\21"+
    "\2\17\1\4\1\22\1\0\1\4\1\2\2\6\1\23"+
    "\1\24\1\25\6\2\1\0\1\10\2\2\1\12\2\0"+
    "\1\26\4\0\1\27\2\0\1\30\22\0\1\1\1\3"+
    "\1\20\1\0\2\21\1\3\1\21\1\4\1\31\2\4"+
    "\1\22\1\4\1\2\1\6\1\32\1\6\1\33\11\2"+
    "\1\1\37\0\1\1\2\17\1\4\1\2\1\6\1\34"+
    "\7\2\1\35\1\2\1\1\2\0\1\36\2\0\1\37"+
    "\10\0\1\40\17\0\1\41\1\1\1\4\1\6\3\2"+
    "\1\42\1\2\1\42\1\1\35\0\1\1\1\4\1\6"+
    "\3\2\1\1\22\0\2\2\1\1\2\0\1\40\6\0"+
    "\1\2\25\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0252\0\u0318\0\u035a\0\u039c"+
    "\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u0252"+
    "\0\u0252\0\u05ac\0\u05ee\0\u0630\0\u0252\0\u0672\0\u06b4\0\u06f6"+
    "\0\u0738\0\u0252\0\u077a\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u0252"+
    "\0\u08c4\0\u0906\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92"+
    "\0\u0252\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0bdc"+
    "\0\u0bdc\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec"+
    "\0\u0e2e\0\u0252\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0252"+
    "\0\u0252\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146"+
    "\0\u039c\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u0252"+
    "\0\u1314\0\u1356\0\u1398\0\u13da\0\u0252\0\u141c\0\u145e\0\u0252"+
    "\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e"+
    "\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e"+
    "\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u0bdc"+
    "\0\u1a8e\0\u1ad0\0\u1b12\0\u0252\0\u1b54\0\u1b96\0\u0e70\0\u1bd8"+
    "\0\u1c1a\0\u1c5c\0\u0252\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6"+
    "\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6"+
    "\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184\0\u21c6"+
    "\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394\0\u23d6"+
    "\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520\0\u2562\0\u25a4\0\u25e6"+
    "\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u2730\0\u2772\0\u27b4\0\u1a8e"+
    "\0\u27f6\0\u2838\0\u287a\0\u28bc\0\u0252\0\u28fe\0\u2940\0\u2982"+
    "\0\u29c4\0\u2a06\0\u2a48\0\u2a8a\0\u014a\0\u2acc\0\u2b0e\0\u2b50"+
    "\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60"+
    "\0\u2da2\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u0252\0\u2eec\0\u2f2e"+
    "\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\u30ba\0\u30fc\0\u313e"+
    "\0\u3180\0\u31c2\0\u3204\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e"+
    "\0\u3390\0\u33d2\0\u3414\0\u3456\0\u014a\0\u3498\0\u34da\0\u351c"+
    "\0\u355e\0\u2bd4\0\u35a0\0\u2c9a\0\u35e2\0\u3624\0\u3666\0\u36a8"+
    "\0\u36ea\0\u372c\0\u376e\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u38b8"+
    "\0\u38fa\0\u393c\0\u397e\0\u39c0\0\u3a02\0\u3a44\0\u3a86\0\u3ac8"+
    "\0\u3b0a\0\u3b4c\0\u3b8e\0\u3bd0\0\u32ca\0\u3c12\0\u3c54\0\u3c96"+
    "\0\u3cd8\0\u3d1a\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22\0\u3e64\0\u3ea6"+
    "\0\u3ee8\0\u3f2a\0\u3f6c\0\u3fae\0\u3ff0\0\u4032\0\u4074\0\u40b6"+
    "\0\u40f8\0\u413a\0\u417c\0\u41be\0\u4200\0\u4242\0\u4284\0\u42c6"+
    "\0\u4308\0\u434a\0\u438c\0\u43ce\0\u4410\0\u4452\0\u4494\0\u44d6"+
    "\0\u4518\0\u455a\0\u459c\0\u45de\0\u4620\0\u4662\0\u46a4\0\u46e6"+
    "\0\u4728\0\u476a\0\u47ac\0\u47ee\0\u4830\0\u4872\0\u48b4\0\u48f6"+
    "\0\u4938\0\u497a\0\u49bc\0\u49fe\0\u4a40\0\u4a82\0\u4ac4\0\u4b06";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\7\1\6\1\7\1\11"+
    "\1\12\1\5\2\6\1\13\1\14\1\7\1\15\1\5"+
    "\1\6\1\16\1\17\1\20\6\6\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\6\1\27\1\30\1\31\1\32"+
    "\1\33\2\20\1\34\1\20\1\35\1\36\1\35\6\6"+
    "\1\37\10\6\1\40\1\30\1\6\1\30\11\41\1\42"+
    "\3\41\1\43\7\41\1\44\31\41\1\45\10\41\1\46"+
    "\11\41\11\47\1\50\3\47\1\51\7\47\1\52\21\47"+
    "\1\53\7\47\1\54\10\47\1\55\5\47\1\56\2\47"+
    "\1\57\11\60\1\61\3\60\1\62\41\60\1\63\10\60"+
    "\1\64\11\60\10\5\2\0\4\5\1\0\1\5\1\0"+
    "\2\5\3\0\6\5\2\0\6\5\13\0\20\5\1\0"+
    "\1\5\1\0\1\5\7\6\2\0\1\65\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\13\0\17\6\1\5\1\0\1\6\1\0\2\66\1\67"+
    "\3\7\1\66\1\7\2\0\3\66\1\70\1\0\1\7"+
    "\1\0\2\66\3\0\1\71\3\66\1\70\1\72\1\0"+
    "\1\73\2\66\1\72\1\66\1\71\1\66\13\0\2\66"+
    "\1\70\5\66\1\70\7\66\1\0\1\66\1\0\2\66"+
    "\1\74\1\75\2\76\1\66\1\76\2\0\3\66\1\70"+
    "\1\0\1\76\1\0\2\66\3\0\1\71\2\77\1\100"+
    "\1\70\1\72\1\0\1\73\2\66\1\72\1\66\1\71"+
    "\1\66\13\0\2\66\1\70\2\66\1\100\2\66\1\70"+
    "\7\66\1\0\1\66\1\0\10\101\1\102\1\103\1\104"+
    "\67\101\102\0\1\5\7\6\2\0\1\65\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\13\0\6\6\1\105\10\6\1\5\1\0\1\6\1\0"+
    "\11\14\1\106\1\107\3\14\1\110\63\14\23\0\1\16"+
    "\102\0\1\111\1\112\22\0\1\35\101\0\1\35\65\0"+
    "\1\35\13\0\1\35\1\0\1\35\32\0\3\73\1\0"+
    "\1\73\7\0\1\73\62\0\1\5\7\6\2\0\1\65"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\1\6\1\113\4\6\13\0\17\6\1\5\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\65\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\2\6"+
    "\1\114\3\6\13\0\17\6\1\5\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\65\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\13\0\12\6"+
    "\1\115\4\6\1\5\1\0\1\6\1\0\1\5\7\6"+
    "\2\0\1\65\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\13\0\4\6\1\116\12\6"+
    "\1\5\1\0\1\6\1\0\1\5\7\6\2\0\1\65"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\1\117\1\6\1\120\3\6\13\0\17\6\1\5"+
    "\1\0\1\6\47\0\1\35\1\0\1\35\100\0\1\121"+
    "\1\35\101\0\1\35\1\0\1\122\77\0\1\35\4\0"+
    "\1\35\24\0\1\5\7\6\2\0\1\65\1\6\1\123"+
    "\1\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\13\0\7\6\1\124\7\6\1\5\1\0"+
    "\1\6\1\0\1\5\2\125\3\5\1\125\1\5\2\0"+
    "\1\5\3\125\1\0\1\5\1\0\1\5\1\125\3\0"+
    "\6\125\2\0\6\125\13\0\17\125\1\5\1\0\1\125"+
    "\1\0\11\41\1\0\3\41\1\0\7\41\1\0\31\41"+
    "\1\0\10\41\1\0\11\41\36\0\1\126\26\0\1\127"+
    "\40\0\1\130\113\0\1\131\133\0\1\132\11\0\11\47"+
    "\1\0\3\47\1\0\7\47\1\0\21\47\1\0\7\47"+
    "\1\0\10\47\1\0\5\47\1\0\2\47\37\0\1\133"+
    "\26\0\1\134\40\0\1\135\56\0\1\136\4\0\1\136"+
    "\4\0\3\136\6\0\1\137\1\0\6\136\2\0\6\136"+
    "\6\0\1\140\4\0\17\136\2\0\1\136\37\0\1\141"+
    "\133\0\1\142\47\0\1\143\1\144\1\145\1\146\1\0"+
    "\1\147\14\0\1\150\1\151\1\152\1\153\1\0\1\154"+
    "\3\0\1\155\106\0\1\156\3\0\11\60\1\0\3\60"+
    "\1\0\41\60\1\0\10\60\1\0\11\60\36\0\1\157"+
    "\26\0\1\160\52\0\1\161\133\0\1\162\11\0\10\5"+
    "\2\0\1\5\1\163\2\5\1\0\1\5\1\0\2\5"+
    "\3\0\6\5\2\0\6\5\13\0\20\5\1\0\1\5"+
    "\1\0\10\66\2\0\4\66\1\0\1\66\1\0\2\66"+
    "\3\0\6\66\2\0\6\66\13\0\20\66\1\0\1\66"+
    "\1\0\2\66\1\67\3\164\1\66\1\164\2\0\4\66"+
    "\1\0\1\164\1\0\2\66\3\0\6\66\2\0\6\66"+
    "\13\0\20\66\1\0\1\66\1\0\3\66\3\165\1\66"+
    "\1\165\2\0\4\66\1\0\1\165\1\0\2\66\3\0"+
    "\6\66\1\166\1\0\6\66\2\0\1\166\10\0\20\66"+
    "\1\0\1\66\1\0\3\66\3\73\1\66\1\73\2\0"+
    "\3\66\1\70\1\0\1\73\1\0\2\66\3\0\4\66"+
    "\1\70\1\72\2\0\2\66\1\72\3\66\13\0\2\66"+
    "\1\70\5\66\1\70\7\66\1\0\1\66\1\0\2\66"+
    "\1\74\1\66\2\167\1\66\1\167\2\0\4\66\1\0"+
    "\1\167\1\0\2\66\3\0\6\66\2\0\6\66\13\0"+
    "\20\66\1\0\1\66\1\0\3\66\3\75\1\66\1\75"+
    "\2\0\3\66\1\70\1\0\1\75\1\0\2\66\3\0"+
    "\4\66\1\70\1\72\1\0\1\73\2\66\1\72\3\66"+
    "\13\0\2\66\1\70\5\66\1\70\7\66\1\0\1\66"+
    "\1\0\2\66\1\74\1\75\2\76\1\66\1\76\2\0"+
    "\3\66\1\70\1\0\1\76\1\0\2\66\3\0\1\170"+
    "\3\66\1\70\1\72\1\0\1\73\2\66\1\72\1\66"+
    "\1\170\1\66\13\0\2\66\1\70\5\66\1\70\7\66"+
    "\1\0\1\66\1\0\4\66\2\171\2\66\2\0\4\66"+
    "\1\0\1\66\1\0\2\66\3\0\6\66\2\0\6\66"+
    "\13\0\20\66\1\0\1\66\1\0\3\66\5\172\2\0"+
    "\3\66\1\172\1\0\1\172\1\0\2\66\3\0\1\66"+
    "\2\172\1\66\2\172\2\0\2\66\2\172\2\66\13\0"+
    "\2\66\1\172\1\66\1\172\3\66\1\172\7\66\1\0"+
    "\1\66\1\0\10\173\1\174\1\0\70\173\10\0\1\174"+
    "\71\0\4\173\2\175\1\173\1\176\1\177\1\0\1\101"+
    "\1\200\3\101\1\175\10\173\1\101\5\173\2\101\42\173"+
    "\1\5\7\6\2\0\1\65\1\6\1\201\1\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\13\0\17\6\1\5\1\0\1\6\1\0\12\106\1\202"+
    "\3\106\1\203\67\106\2\14\1\106\2\14\1\0\1\14"+
    "\1\204\4\14\10\106\1\14\5\106\2\14\42\106\25\0"+
    "\1\205\54\0\1\5\7\6\2\0\1\65\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\3\6"+
    "\1\206\2\6\13\0\17\6\1\5\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\65\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\13\0\4\6"+
    "\1\207\12\6\1\5\1\0\1\210\1\0\1\5\7\6"+
    "\2\0\1\65\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\2\6\1\211\3\6\13\0\17\6"+
    "\1\5\1\0\1\6\1\0\1\5\7\6\2\0\1\65"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\1\212\5\6\13\0\17\6\1\5\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\65\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\3\6\1\213"+
    "\2\6\13\0\17\6\1\5\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\65\1\6\1\214\1\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\13\0"+
    "\17\6\1\5\1\0\1\6\51\0\1\35\1\0\1\20"+
    "\27\0\1\5\7\6\2\0\1\65\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\13\0"+
    "\6\6\1\215\10\6\1\5\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\65\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\13\0\3\6\1\216"+
    "\13\6\1\5\1\0\1\6\1\0\1\5\7\125\2\0"+
    "\1\217\3\125\1\0\1\125\1\0\1\5\1\125\3\0"+
    "\6\125\2\0\6\125\13\0\17\125\1\5\1\0\1\125"+
    "\63\0\1\220\61\0\1\221\75\0\1\222\133\0\1\223"+
    "\73\0\1\224\61\0\1\225\37\0\52\136\1\140\27\136"+
    "\1\0\1\136\4\0\1\136\4\0\3\136\10\0\6\136"+
    "\2\0\6\136\6\0\1\140\4\0\17\136\2\0\1\136"+
    "\37\0\1\226\133\0\1\227\24\0\1\230\43\0\1\231"+
    "\1\232\61\0\1\233\125\0\1\234\30\0\1\235\126\0"+
    "\1\236\24\0\1\237\44\0\1\240\111\0\1\241\102\0"+
    "\1\242\101\0\1\243\54\0\1\244\125\0\1\245\103\0"+
    "\1\246\16\0\1\247\1\0\1\250\1\0\1\251\3\0"+
    "\1\252\72\0\1\253\61\0\1\254\75\0\1\255\133\0"+
    "\1\256\11\0\3\5\5\257\2\0\3\5\1\257\1\0"+
    "\1\257\1\0\2\5\3\0\1\5\2\257\1\5\2\257"+
    "\2\0\2\5\2\257\2\5\13\0\2\5\1\257\1\5"+
    "\1\257\3\5\1\257\7\5\1\0\1\5\1\0\2\66"+
    "\1\67\3\164\1\66\1\164\2\0\4\66\1\0\1\164"+
    "\1\0\2\66\3\0\1\71\5\66\2\0\4\66\1\71"+
    "\1\66\13\0\20\66\1\0\1\66\1\0\3\66\3\165"+
    "\1\66\1\165\2\0\3\66\1\70\1\0\1\165\1\0"+
    "\2\66\3\0\4\66\1\70\1\66\2\0\6\66\13\0"+
    "\2\66\1\70\5\66\1\70\7\66\1\0\1\66\4\0"+
    "\3\165\1\0\1\165\7\0\1\165\62\0\2\66\1\74"+
    "\1\66\2\167\1\66\1\167\2\0\4\66\1\0\1\167"+
    "\1\0\2\66\3\0\1\170\5\66\2\0\4\66\1\170"+
    "\1\66\13\0\20\66\1\0\1\66\1\0\2\66\1\260"+
    "\1\66\2\171\2\66\2\0\4\66\1\0\1\66\1\0"+
    "\2\66\3\0\6\66\2\0\6\66\13\0\20\66\1\0"+
    "\1\66\1\0\2\66\1\261\5\172\2\0\3\66\1\172"+
    "\1\0\1\172\1\0\2\66\3\0\1\170\2\172\1\66"+
    "\2\172\2\0\2\66\2\172\1\170\1\66\13\0\2\66"+
    "\1\172\1\66\1\172\3\66\1\172\7\66\1\0\1\66"+
    "\1\0\10\173\1\102\1\0\74\173\2\176\1\173\1\176"+
    "\1\174\1\0\5\173\1\176\66\173\2\101\1\173\1\101"+
    "\1\174\1\0\5\173\1\101\65\173\5\262\1\102\1\0"+
    "\3\173\1\262\1\173\1\262\7\173\2\262\1\173\2\262"+
    "\4\173\2\262\17\173\1\262\1\173\1\262\3\173\1\262"+
    "\12\173\1\5\7\6\2\0\1\65\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\3\6\1\263"+
    "\2\6\13\0\17\6\1\5\1\0\1\6\1\0\11\106"+
    "\1\0\73\106\5\264\2\106\1\202\2\106\1\264\1\203"+
    "\1\264\7\106\2\264\1\106\2\264\4\106\2\264\17\106"+
    "\1\264\1\106\1\264\3\106\1\264\12\106\24\0\1\265"+
    "\55\0\1\5\7\6\2\0\1\65\1\6\1\266\1\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\6\6\13\0\17\6\1\5\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\65\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\2\6\1\267\3\6\13\0"+
    "\17\6\1\5\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\65\1\270\2\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\13\0\17\6\1\5\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\65\1\6\1\271"+
    "\1\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\13\0\17\6\1\5\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\65\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\13\0\6\6"+
    "\1\272\10\6\1\5\1\0\1\6\1\0\1\5\7\6"+
    "\2\0\1\65\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\1\273\5\6\13\0\17\6\1\5"+
    "\1\0\1\6\1\0\1\5\7\6\2\0\1\65\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\6\6\13\0\2\6\1\274\14\6\1\5\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\65\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\1\275\5\6"+
    "\13\0\17\6\1\5\1\0\1\6\1\0\1\5\7\6"+
    "\2\0\1\65\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\13\0\1\6\1\276\15\6"+
    "\1\5\1\0\1\6\1\0\10\5\2\0\1\5\1\277"+
    "\2\5\1\0\1\5\1\0\2\5\3\0\6\5\2\0"+
    "\6\5\13\0\20\5\1\0\1\5\57\0\1\300\63\0"+
    "\1\220\123\0\1\301\54\0\1\302\122\0\1\303\63\0"+
    "\1\224\123\0\1\304\54\0\1\305\102\0\1\306\102\0"+
    "\1\307\123\0\1\310\56\0\1\311\104\0\1\312\21\0"+
    "\1\313\54\0\1\314\102\0\1\315\1\316\55\0\1\317"+
    "\130\0\1\320\120\0\1\321\56\0\1\322\100\0\1\323"+
    "\101\0\1\324\22\0\1\325\57\0\1\326\127\0\1\327"+
    "\74\0\1\330\101\0\1\331\35\0\1\332\126\0\1\333"+
    "\116\0\1\334\63\0\1\253\123\0\1\335\54\0\1\336"+
    "\44\0\3\5\5\337\2\0\3\5\1\337\1\0\1\337"+
    "\1\0\2\5\3\0\1\5\2\337\1\5\2\337\2\0"+
    "\2\5\2\337\2\5\13\0\2\5\1\337\1\5\1\337"+
    "\3\5\1\337\7\5\1\0\1\5\1\0\2\66\1\261"+
    "\5\172\2\0\3\66\1\172\1\0\1\172\1\0\2\66"+
    "\3\0\1\66\2\172\1\66\2\172\2\0\2\66\2\172"+
    "\2\66\13\0\2\66\1\172\1\66\1\172\3\66\1\172"+
    "\7\66\1\0\1\66\1\0\3\173\5\340\1\102\1\0"+
    "\3\173\1\340\1\173\1\340\7\173\2\340\1\173\2\340"+
    "\4\173\2\340\17\173\1\340\1\173\1\340\3\173\1\340"+
    "\12\173\1\5\7\6\2\0\1\65\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\4\6\1\275"+
    "\1\6\13\0\17\6\1\5\1\0\1\6\1\0\3\106"+
    "\5\341\2\106\1\202\2\106\1\341\1\203\1\341\7\106"+
    "\2\341\1\106\2\341\4\106\2\341\17\106\1\341\1\106"+
    "\1\341\3\106\1\341\12\106\1\5\7\6\2\0\1\65"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\5\6\1\342\13\0\17\6\1\5\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\65\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\13\0"+
    "\6\6\1\343\10\6\1\5\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\65\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\13\0\6\6\1\344"+
    "\10\6\1\5\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\65\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\1\345\5\6\13\0\17\6\1\5\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\65\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\13\0\1\6\1\346\15\6\1\5\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\65\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\2\6\1\347\3\6"+
    "\13\0\17\6\1\5\1\0\1\6\1\0\1\5\7\6"+
    "\2\0\1\65\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\5\6\1\275\13\0\17\6\1\5"+
    "\1\0\1\6\1\0\1\5\7\6\2\0\1\65\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\1\6\1\215\4\6\13\0\17\6\1\5\1\0\1\6"+
    "\1\0\3\5\5\350\2\0\3\5\1\350\1\0\1\350"+
    "\1\0\2\5\3\0\1\5\2\350\1\5\2\350\2\0"+
    "\2\5\2\350\2\5\13\0\2\5\1\350\1\5\1\350"+
    "\3\5\1\350\7\5\1\0\1\5\25\0\1\351\120\0"+
    "\1\220\12\0\1\300\24\0\1\302\1\352\5\302\1\352"+
    "\2\0\3\302\1\0\1\302\1\0\1\352\1\302\1\0"+
    "\1\302\1\352\6\302\2\352\6\302\1\0\2\352\1\0"+
    "\1\352\2\0\4\352\17\302\2\352\1\302\25\0\1\353"+
    "\120\0\1\224\12\0\1\303\24\0\1\305\1\354\5\305"+
    "\1\354\2\0\3\305\1\0\1\305\1\0\1\354\1\305"+
    "\1\0\1\305\1\354\6\305\2\354\6\305\1\0\2\354"+
    "\1\0\1\354\2\0\4\354\17\305\2\354\1\305\61\0"+
    "\1\355\61\0\1\356\17\0\1\357\101\0\1\316\34\0"+
    "\1\360\154\0\1\361\53\0\1\362\1\0\1\363\116\0"+
    "\1\364\107\0\1\365\77\0\1\366\76\0\1\367\60\0"+
    "\1\370\103\0\1\371\100\0\1\372\101\0\1\373\101\0"+
    "\1\374\104\0\1\375\52\0\1\376\21\0\1\377\126\0"+
    "\1\u0100\77\0\1\u0101\77\0\1\u0102\64\0\1\u0103\63\0"+
    "\1\u0104\120\0\1\253\12\0\1\334\24\0\1\336\1\u0105"+
    "\5\336\1\u0105\2\0\3\336\1\0\1\336\1\0\1\u0105"+
    "\1\336\1\0\1\336\1\u0105\6\336\2\u0105\6\336\1\0"+
    "\2\u0105\1\0\1\u0105\2\0\4\u0105\17\336\2\u0105\1\336"+
    "\1\0\3\5\5\u0106\2\0\3\5\1\u0106\1\0\1\u0106"+
    "\1\0\2\5\3\0\1\5\2\u0106\1\5\2\u0106\2\0"+
    "\2\5\2\u0106\2\5\13\0\2\5\1\u0106\1\5\1\u0106"+
    "\3\5\1\u0106\7\5\1\0\1\5\1\0\3\173\5\u0107"+
    "\1\102\1\0\3\173\1\u0107\1\173\1\u0107\7\173\2\u0107"+
    "\1\173\2\u0107\4\173\2\u0107\17\173\1\u0107\1\173\1\u0107"+
    "\3\173\1\u0107\12\173\3\106\5\u0108\2\106\1\202\2\106"+
    "\1\u0108\1\203\1\u0108\7\106\2\u0108\1\106\2\u0108\4\106"+
    "\2\u0108\17\106\1\u0108\1\106\1\u0108\3\106\1\u0108\12\106"+
    "\1\5\7\6\2\0\1\65\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\13\0\6\6"+
    "\1\116\10\6\1\5\1\0\1\6\1\0\1\5\7\6"+
    "\2\0\1\65\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\13\0\12\6\1\u0109\4\6"+
    "\1\5\1\0\1\6\1\0\1\5\7\6\2\0\1\65"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\1\6\1\u010a\4\6\13\0\17\6\1\5\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\65\1\6\1\345"+
    "\1\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\13\0\17\6\1\5\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\65\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\13\0\4\6"+
    "\1\u010b\12\6\1\5\1\0\1\6\1\0\3\5\5\u010c"+
    "\2\0\3\5\1\u010c\1\0\1\u010c\1\0\2\5\3\0"+
    "\1\5\2\u010c\1\5\2\u010c\2\0\2\5\2\u010c\2\5"+
    "\13\0\2\5\1\u010c\1\5\1\u010c\3\5\1\u010c\7\5"+
    "\1\0\1\5\25\0\1\302\101\0\1\305\114\0\1\u010d"+
    "\103\0\1\u010e\130\0\1\u010f\50\0\1\u0110\124\0\1\u0111"+
    "\101\0\1\u0112\32\0\1\u0113\146\0\1\u0114\62\0\1\u0115"+
    "\100\0\1\316\103\0\1\u0116\77\0\1\u0117\127\0\1\316"+
    "\105\0\1\u0118\46\0\1\u0119\126\0\1\316\102\0\1\u011a"+
    "\111\0\1\u011b\44\0\1\u011c\135\0\1\u011d\45\0\1\u011b"+
    "\101\0\1\u011e\54\0\1\u0101\112\0\1\336\55\0\3\5"+
    "\5\6\2\0\3\5\1\6\1\0\1\6\1\0\2\5"+
    "\3\0\1\5\2\6\1\5\2\6\2\0\2\5\2\6"+
    "\2\5\13\0\2\5\1\6\1\5\1\6\3\5\1\6"+
    "\7\5\1\0\1\5\1\0\3\173\5\101\1\102\1\0"+
    "\3\173\1\101\1\173\1\101\7\173\2\101\1\173\2\101"+
    "\4\173\2\101\17\173\1\101\1\173\1\101\3\173\1\101"+
    "\12\173\3\106\5\14\2\106\1\202\2\106\1\14\1\203"+
    "\1\14\7\106\2\14\1\106\2\14\4\106\2\14\17\106"+
    "\1\14\1\106\1\14\3\106\1\14\12\106\1\5\7\6"+
    "\2\0\1\65\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\2\6\1\274\3\6\13\0\17\6"+
    "\1\5\1\0\1\6\1\0\1\5\7\6\2\0\1\65"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\2\6\1\u011f\3\6\13\0\17\6\1\5\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\65\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\13\0\1\u0120\16\6\1\5\1\0\1\6\1\0\3\5"+
    "\5\u0121\2\0\3\5\1\u0121\1\0\1\u0121\1\0\2\5"+
    "\3\0\1\5\2\u0121\1\5\2\u0121\2\0\2\5\2\u0121"+
    "\2\5\13\0\2\5\1\u0121\1\5\1\u0121\3\5\1\u0121"+
    "\7\5\1\0\1\5\66\0\1\u0122\75\0\1\u0123\63\0"+
    "\1\316\52\0\1\316\127\0\1\366\75\0\1\375\124\0"+
    "\1\366\57\0\1\316\104\0\1\u0124\77\0\1\u0125\124\0"+
    "\1\u0126\76\0\1\u0127\35\0\1\u0122\145\0\1\u0110\21\0"+
    "\44\u011b\1\316\35\u011b\37\0\1\u0128\122\0\1\u0129\60\0"+
    "\1\u012a\42\0\1\5\7\6\2\0\1\65\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\13\0\2\6\1\275\14\6\1\5\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\65\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\3\6\1\u012b\2\6"+
    "\13\0\17\6\1\5\1\0\1\6\1\0\3\5\5\125"+
    "\2\0\3\5\1\125\1\0\1\125\1\0\2\5\3\0"+
    "\1\5\2\125\1\5\2\125\2\0\2\5\2\125\2\5"+
    "\13\0\2\5\1\125\1\5\1\125\3\5\1\125\7\5"+
    "\1\0\1\5\42\0\1\u012c\103\0\1\u012d\70\0\1\u012e"+
    "\34\0\1\u012f\50\0\1\366\104\0\1\u0130\77\0\1\u0131"+
    "\103\0\1\u0132\120\0\1\u0133\106\0\1\u0134\14\0\1\5"+
    "\7\6\2\0\1\65\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\1\6\1\271\4\6\13\0"+
    "\17\6\1\5\1\0\1\6\43\0\1\316\100\0\1\u0135"+
    "\125\0\1\u0136\55\0\1\u0137\76\0\1\u0138\136\0\1\316"+
    "\50\0\1\u011b\75\0\1\u011b\101\0\1\u0139\60\0\1\u013a"+
    "\124\0\1\u013b\77\0\1\u013c\103\0\1\u013d\130\0\1\u013e"+
    "\52\0\1\u013f\103\0\1\u013d\100\0\1\316\121\0\1\316"+
    "\100\0\1\u0140\57\0\1\u0131\126\0\1\u011b\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19272];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\5\1\1\11\2\1\1\11\12\1\2\11\3\1"+
    "\1\11\4\1\1\11\5\1\1\11\10\1\1\11\20\1"+
    "\1\11\1\0\4\1\2\11\7\1\1\0\4\1\2\0"+
    "\1\11\4\0\1\11\2\0\1\11\22\0\3\1\1\0"+
    "\5\1\1\11\6\1\1\11\14\1\37\0\6\1\1\11"+
    "\12\1\2\0\1\1\2\0\1\1\10\0\1\11\17\0"+
    "\13\1\35\0\7\1\22\0\3\1\2\0\1\1\6\0"+
    "\1\1\25\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public ThingMLTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			case Token.COMMENT_DOCUMENTATION:
				state = DOCCOMMENT;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	private boolean zzRefill() throws java.io.IOException {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) throws java.io.IOException {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ThingMLTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ThingMLTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 31: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
          }
        case 35: break;
        case 20: 
          { start = zzMarkedPos-2; 					yybegin(EOL_COMMENT);
          }
        case 36: break;
        case 5: 
          { addNullToken(); return firstToken;
          }
        case 37: break;
        case 32: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.COMMENT_KEYWORD); start = zzMarkedPos;
          }
        case 38: break;
        case 25: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 39: break;
        case 22: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 40: break;
        case 28: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 41: break;
        case 21: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 42: break;
        case 7: 
          { addToken(Token.WHITESPACE);
          }
        case 43: break;
        case 17: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 44: break;
        case 26: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 45: break;
        case 16: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 46: break;
        case 29: 
          { addToken(Token.RESERVED_WORD);
          }
        case 47: break;
        case 9: 
          { addToken(Token.SEPARATOR);
          }
        case 48: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 49: break;
        case 14: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 50: break;
        case 34: 
          { addToken(Token.FUNCTION);
          }
        case 51: break;
        case 4: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 52: break;
        case 6: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 53: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 54: break;
        case 18: 
          { addToken(Token.ERROR_CHAR);
          }
        case 55: break;
        case 13: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); return firstToken;
          }
        case 56: break;
        case 10: 
          { addToken(Token.ANNOTATION);
          }
        case 57: break;
        case 27: 
          { start = zzMarkedPos-3; yybegin(DOCCOMMENT);
          }
        case 58: break;
        case 19: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 59: break;
        case 33: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 60: break;
        case 24: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.COMMENT_MARKUP); start = zzMarkedPos;
          }
        case 61: break;
        case 30: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 62: break;
        case 23: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_DOCUMENTATION);
          }
        case 63: break;
        case 15: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 64: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 65: break;
        case 8: 
          { addToken(Token.OPERATOR);
          }
        case 66: break;
        case 11: 
          { 
          }
        case 67: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 68: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 321: break;
            case DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); return firstToken;
            }
            case 322: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 323: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 324: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
