/* The following code was generated by JFlex 1.4.3 on 10/29/12 7:20 PM */

/*
 * 16/05/2012
 *
 * ThingMLTokenMaker.java - Scanner for the ThingML programming language.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */

package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for the ThingML programming language.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated JavaTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell and Kyrre Havik Eriksen
 * @version 0.5
 *
 */

public class ThingMLTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 6;
  public static final int DOCCOMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\23\1\11\1\0\1\23\1\20\22\0\1\23\1\53\1\16"+
    "\1\21\1\22\1\53\1\55\1\10\2\77\1\25\1\46\1\45\1\34"+
    "\1\35\1\24\1\4\1\5\2\17\4\7\2\3\1\56\1\45\1\47"+
    "\1\50\1\52\1\54\1\76\1\6\1\27\1\6\1\67\1\33\1\32"+
    "\5\1\1\26\5\1\1\74\5\1\1\31\2\1\1\77\1\12\1\77"+
    "\1\51\1\2\1\0\1\41\1\30\1\63\1\61\1\40\1\15\1\72"+
    "\1\57\1\65\1\1\1\75\1\42\1\66\1\14\1\60\1\62\1\100"+
    "\1\37\1\43\1\36\1\13\1\71\1\70\1\64\1\73\1\1\1\101"+
    "\1\51\1\44\1\54\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\2\3\1\4\1\5\1\6\1\1"+
    "\1\7\2\10\1\2\1\10\6\2\1\11\1\2\4\10"+
    "\1\12\10\2\1\13\1\14\1\15\5\14\1\16\10\14"+
    "\1\17\3\14\1\1\2\20\1\21\1\3\1\20\1\21"+
    "\2\20\1\22\2\20\1\4\1\23\1\0\1\4\2\6"+
    "\1\24\1\25\1\26\13\2\1\0\1\10\1\27\10\2"+
    "\1\13\2\0\1\30\4\0\1\31\2\0\1\32\22\0"+
    "\1\1\1\3\1\21\1\0\2\22\1\3\1\22\1\4"+
    "\1\12\2\4\1\23\1\4\1\6\1\33\1\6\1\34"+
    "\26\2\1\1\37\0\1\1\2\20\1\4\1\6\1\35"+
    "\16\2\1\36\6\2\1\1\2\0\1\37\2\0\1\40"+
    "\10\0\1\41\17\0\1\42\1\1\1\4\1\6\5\2"+
    "\1\27\7\2\1\1\35\0\1\1\1\4\1\6\10\2"+
    "\1\1\22\0\6\2\1\1\2\0\1\41\6\0\2\2"+
    "\11\0\1\2\5\0\1\2\7\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u0252\0\u02d6\0\u0318\0\u035a\0\u039c"+
    "\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u0252"+
    "\0\u0252\0\u05ac\0\u05ee\0\u0630\0\u0252\0\u0672\0\u06b4\0\u06f6"+
    "\0\u0738\0\u077a\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906"+
    "\0\u0252\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0252\0\u0a92"+
    "\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0252"+
    "\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0daa\0\u0daa"+
    "\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc"+
    "\0\u0252\0\u103e\0\u1080\0\u10c2\0\u1104\0\u0252\0\u0252\0\u1146"+
    "\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356"+
    "\0\u1398\0\u13da\0\u141c\0\u035a\0\u145e\0\u014a\0\u14a0\0\u14e2"+
    "\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2"+
    "\0\u1734\0\u0252\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u0252\0\u187e"+
    "\0\u18c0\0\u0252\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c"+
    "\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c"+
    "\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c"+
    "\0\u1eae\0\u0daa\0\u1ef0\0\u1f32\0\u1f74\0\u0252\0\u1fb6\0\u1ff8"+
    "\0\u103e\0\u203a\0\u207c\0\u0252\0\u20be\0\u2100\0\u2142\0\u2184"+
    "\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394"+
    "\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520\0\u2562\0\u25a4"+
    "\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u2730\0\u2772\0\u27b4"+
    "\0\u27f6\0\u2838\0\u287a\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4"+
    "\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4"+
    "\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u2de4"+
    "\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e\0\u1ef0\0\u2f70\0\u2fb2"+
    "\0\u2ff4\0\u0252\0\u3036\0\u3078\0\u30ba\0\u30fc\0\u313e\0\u3180"+
    "\0\u31c2\0\u3204\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e\0\u3390"+
    "\0\u014a\0\u33d2\0\u3414\0\u3456\0\u3498\0\u34da\0\u351c\0\u355e"+
    "\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u36a8\0\u36ea\0\u372c\0\u376e"+
    "\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa\0\u0252\0\u393c"+
    "\0\u397e\0\u39c0\0\u3a02\0\u3a44\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c"+
    "\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54\0\u3c96\0\u3cd8\0\u3d1a\0\u3d5c"+
    "\0\u3d9e\0\u3de0\0\u3e22\0\u3e64\0\u3ea6\0\u3ee8\0\u3f2a\0\u3f6c"+
    "\0\u3fae\0\u3ff0\0\u4032\0\u4074\0\u40b6\0\u40f8\0\u413a\0\u417c"+
    "\0\u41be\0\u3624\0\u4200\0\u36ea\0\u4242\0\u4284\0\u42c6\0\u4308"+
    "\0\u434a\0\u438c\0\u43ce\0\u4410\0\u4452\0\u4494\0\u44d6\0\u4518"+
    "\0\u455a\0\u459c\0\u45de\0\u4620\0\u4662\0\u46a4\0\u46e6\0\u4728"+
    "\0\u476a\0\u47ac\0\u47ee\0\u4830\0\u3d1a\0\u4872\0\u48b4\0\u48f6"+
    "\0\u4938\0\u497a\0\u49bc\0\u49fe\0\u4a40\0\u4a82\0\u4ac4\0\u4b06"+
    "\0\u4b48\0\u4b8a\0\u4bcc\0\u4c0e\0\u4c50\0\u4c92\0\u4cd4\0\u4d16"+
    "\0\u4d58\0\u4d9a\0\u4ddc\0\u4e1e\0\u4e60\0\u4ea2\0\u4ee4\0\u4f26"+
    "\0\u4f68\0\u4faa\0\u4fec\0\u502e\0\u5070\0\u50b2\0\u50f4\0\u5136"+
    "\0\u5178\0\u51ba\0\u51fc\0\u523e\0\u5280\0\u52c2\0\u5304\0\u5346"+
    "\0\u5388\0\u53ca\0\u540c\0\u544e\0\u5490\0\u54d2\0\u5514\0\u5556"+
    "\0\u5598\0\u55da\0\u561c\0\u565e\0\u56a0\0\u56e2\0\u5724\0\u5766"+
    "\0\u57a8\0\u57ea\0\u582c\0\u586e\0\u58b0\0\u58f2\0\u5934\0\u5976"+
    "\0\u59b8\0\u59fa\0\u5a3c\0\u5a7e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\7\1\6\1\7\1\11"+
    "\1\12\1\5\3\6\1\13\1\7\1\14\1\5\1\6"+
    "\1\15\1\16\1\17\2\6\1\20\3\6\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\6\1\27\1\30\1\31"+
    "\1\32\1\33\2\17\1\34\1\17\1\35\1\36\1\35"+
    "\1\6\1\37\1\40\1\41\1\42\1\6\1\43\1\44"+
    "\3\6\1\45\2\6\1\46\1\47\1\30\1\6\1\30"+
    "\11\50\1\51\3\50\1\52\7\50\1\53\31\50\1\54"+
    "\10\50\1\55\11\50\11\56\1\57\3\56\1\60\7\56"+
    "\1\61\21\56\1\62\7\56\1\63\10\56\1\64\5\56"+
    "\1\65\2\56\1\66\11\67\1\70\3\67\1\71\41\67"+
    "\1\72\10\67\1\73\11\67\10\5\2\0\4\5\1\0"+
    "\1\5\1\0\2\5\3\0\6\5\2\0\6\5\13\0"+
    "\20\5\1\0\1\5\1\0\1\5\7\6\2\0\1\74"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\13\0\17\6\1\5\1\0\1\6\1\0"+
    "\2\75\1\76\3\7\1\75\1\7\2\0\3\75\1\77"+
    "\1\0\1\7\1\0\2\75\3\0\1\100\3\75\1\77"+
    "\1\101\1\0\1\102\2\75\1\101\1\75\1\100\1\75"+
    "\13\0\2\75\1\77\5\75\1\77\7\75\1\0\1\75"+
    "\1\0\2\75\1\103\1\104\2\105\1\75\1\105\2\0"+
    "\3\75\1\77\1\0\1\105\1\0\2\75\3\0\1\100"+
    "\2\106\1\107\1\77\1\101\1\0\1\102\2\75\1\101"+
    "\1\75\1\100\1\75\13\0\2\75\1\77\2\75\1\107"+
    "\2\75\1\77\7\75\1\0\1\75\1\0\10\110\1\111"+
    "\1\112\1\113\67\110\102\0\11\13\1\114\1\115\3\13"+
    "\1\116\63\13\23\0\1\15\102\0\1\117\1\120\22\0"+
    "\1\35\101\0\1\35\31\0\1\5\7\6\2\0\1\74"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\2\6\1\121\3\6\13\0\17\6\1\5\1\0"+
    "\1\6\35\0\1\35\13\0\1\35\1\0\1\35\32\0"+
    "\3\102\1\0\1\102\7\0\1\102\62\0\1\5\7\6"+
    "\2\0\1\74\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\1\6\1\122\4\6\13\0\1\123"+
    "\16\6\1\5\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\74\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\2\6\1\124\3\6\13\0\17\6\1\5"+
    "\1\0\1\6\1\0\1\5\7\6\2\0\1\74\1\6"+
    "\1\125\1\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\13\0\5\6\1\126\4\6\1\127"+
    "\4\6\1\5\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\74\2\6\1\130\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\13\0\4\6\1\131\12\6"+
    "\1\5\1\0\1\6\1\0\1\5\7\6\2\0\1\74"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\1\132\1\6\1\133\3\6\13\0\17\6\1\5"+
    "\1\0\1\6\47\0\1\35\1\0\1\35\100\0\1\134"+
    "\1\35\101\0\1\35\1\0\1\135\77\0\1\35\4\0"+
    "\1\35\24\0\1\5\7\6\2\0\1\74\1\6\1\136"+
    "\1\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\13\0\17\6\1\5\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\74\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\3\6\1\137\2\6"+
    "\13\0\17\6\1\5\1\0\1\6\1\0\1\5\7\6"+
    "\2\0\1\74\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\1\6\1\140\4\6\13\0\1\6"+
    "\1\141\15\6\1\5\1\0\1\6\1\0\1\5\7\6"+
    "\2\0\1\74\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\13\0\1\6\1\142\15\6"+
    "\1\5\1\0\1\6\1\0\1\5\7\6\2\0\1\74"+
    "\1\6\1\143\1\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\13\0\17\6\1\5\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\74\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\2\6"+
    "\1\144\3\6\13\0\17\6\1\5\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\74\1\145\2\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\13\0"+
    "\17\6\1\5\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\74\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\2\6\1\146\3\6\13\0\17\6\1\5"+
    "\1\0\1\6\1\0\1\5\2\147\3\5\1\147\1\5"+
    "\2\0\1\5\3\147\1\0\1\5\1\0\1\5\1\147"+
    "\3\0\6\147\2\0\6\147\13\0\17\147\1\5\1\0"+
    "\1\147\1\0\11\50\1\0\3\50\1\0\7\50\1\0"+
    "\31\50\1\0\10\50\1\0\11\50\36\0\1\150\26\0"+
    "\1\151\40\0\1\152\113\0\1\153\133\0\1\154\11\0"+
    "\11\56\1\0\3\56\1\0\7\56\1\0\21\56\1\0"+
    "\7\56\1\0\10\56\1\0\5\56\1\0\2\56\37\0"+
    "\1\155\26\0\1\156\40\0\1\157\56\0\1\160\4\0"+
    "\1\160\4\0\3\160\6\0\1\161\1\0\6\160\2\0"+
    "\6\160\6\0\1\162\4\0\17\160\2\0\1\160\37\0"+
    "\1\163\133\0\1\164\47\0\1\165\1\166\1\167\1\170"+
    "\1\0\1\171\14\0\1\172\1\173\1\174\1\175\1\0"+
    "\1\176\3\0\1\177\106\0\1\200\3\0\11\67\1\0"+
    "\3\67\1\0\41\67\1\0\10\67\1\0\11\67\36\0"+
    "\1\201\26\0\1\202\52\0\1\203\133\0\1\204\11\0"+
    "\10\5\2\0\1\5\1\205\2\5\1\0\1\5\1\0"+
    "\2\5\3\0\6\5\2\0\6\5\13\0\20\5\1\0"+
    "\1\5\1\0\10\75\2\0\4\75\1\0\1\75\1\0"+
    "\2\75\3\0\6\75\2\0\6\75\13\0\20\75\1\0"+
    "\1\75\1\0\2\75\1\76\3\206\1\75\1\206\2\0"+
    "\4\75\1\0\1\206\1\0\2\75\3\0\6\75\2\0"+
    "\6\75\13\0\20\75\1\0\1\75\1\0\3\75\3\207"+
    "\1\75\1\207\2\0\4\75\1\0\1\207\1\0\2\75"+
    "\3\0\6\75\1\210\1\0\6\75\2\0\1\210\10\0"+
    "\20\75\1\0\1\75\1\0\3\75\3\102\1\75\1\102"+
    "\2\0\3\75\1\77\1\0\1\102\1\0\2\75\3\0"+
    "\4\75\1\77\1\101\2\0\2\75\1\101\3\75\13\0"+
    "\2\75\1\77\5\75\1\77\7\75\1\0\1\75\1\0"+
    "\2\75\1\103\1\75\2\211\1\75\1\211\2\0\4\75"+
    "\1\0\1\211\1\0\2\75\3\0\6\75\2\0\6\75"+
    "\13\0\20\75\1\0\1\75\1\0\3\75\3\104\1\75"+
    "\1\104\2\0\3\75\1\77\1\0\1\104\1\0\2\75"+
    "\3\0\4\75\1\77\1\101\1\0\1\102\2\75\1\101"+
    "\3\75\13\0\2\75\1\77\5\75\1\77\7\75\1\0"+
    "\1\75\1\0\2\75\1\103\1\104\2\105\1\75\1\105"+
    "\2\0\3\75\1\77\1\0\1\105\1\0\2\75\3\0"+
    "\1\212\3\75\1\77\1\101\1\0\1\102\2\75\1\101"+
    "\1\75\1\212\1\75\13\0\2\75\1\77\5\75\1\77"+
    "\7\75\1\0\1\75\1\0\4\75\2\213\2\75\2\0"+
    "\4\75\1\0\1\75\1\0\2\75\3\0\6\75\2\0"+
    "\6\75\13\0\20\75\1\0\1\75\1\0\3\75\5\214"+
    "\2\0\3\75\1\214\1\0\1\214\1\0\2\75\3\0"+
    "\1\75\2\214\1\75\2\214\2\0\2\75\2\214\2\75"+
    "\13\0\2\75\1\214\1\75\1\214\3\75\1\214\7\75"+
    "\1\0\1\75\1\0\10\215\1\216\1\0\70\215\10\0"+
    "\1\216\71\0\4\215\2\217\1\215\1\220\1\221\1\0"+
    "\1\110\1\222\3\110\1\217\10\215\1\110\5\215\2\110"+
    "\42\215\12\114\1\223\3\114\1\224\67\114\2\13\1\114"+
    "\2\13\1\0\1\13\1\225\4\13\10\114\1\13\5\114"+
    "\2\13\42\114\25\0\1\226\54\0\1\5\7\6\2\0"+
    "\1\74\2\6\1\227\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\13\0\17\6\1\5\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\74\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\3\6"+
    "\1\230\2\6\13\0\17\6\1\5\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\74\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\13\0\6\6"+
    "\1\231\10\6\1\5\1\0\1\6\1\0\1\5\7\6"+
    "\2\0\1\74\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\13\0\4\6\1\232\6\6"+
    "\1\233\3\6\1\5\1\0\1\234\1\0\1\5\7\6"+
    "\2\0\1\74\1\235\2\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\1\236\5\6\13\0\17\6"+
    "\1\5\1\0\1\6\1\0\1\5\7\6\2\0\1\74"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\13\0\6\6\1\237\10\6\1\5\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\74\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\2\6"+
    "\1\240\3\6\13\0\17\6\1\5\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\74\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\1\241\5\6\13\0"+
    "\17\6\1\5\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\74\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\1\233\5\6\13\0\17\6\1\5\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\74\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\3\6"+
    "\1\242\2\6\13\0\17\6\1\5\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\74\1\6\1\243\1\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\13\0\17\6\1\5\1\0\1\6\51\0\1\35\1\0"+
    "\1\17\27\0\1\5\7\6\2\0\1\74\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\1\244"+
    "\5\6\13\0\17\6\1\5\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\74\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\13\0\1\6\1\245"+
    "\15\6\1\5\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\74\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\1\6\1\246\4\6\13\0\17\6\1\5"+
    "\1\0\1\6\1\0\1\5\7\6\2\0\1\74\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\6\6\13\0\7\6\1\247\7\6\1\5\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\74\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\1\250\5\6"+
    "\13\0\4\6\1\251\1\6\1\237\10\6\1\5\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\74\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\5\6"+
    "\1\252\13\0\17\6\1\5\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\74\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\3\6\1\253\2\6\13\0"+
    "\17\6\1\5\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\74\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\2\6\1\254\3\6\13\0\17\6\1\5"+
    "\1\0\1\6\1\0\1\5\7\147\2\0\1\255\3\147"+
    "\1\0\1\147\1\0\1\5\1\147\3\0\6\147\2\0"+
    "\6\147\13\0\17\147\1\5\1\0\1\147\63\0\1\256"+
    "\61\0\1\257\75\0\1\260\133\0\1\261\73\0\1\262"+
    "\61\0\1\263\37\0\52\160\1\162\27\160\1\0\1\160"+
    "\4\0\1\160\4\0\3\160\10\0\6\160\2\0\6\160"+
    "\6\0\1\162\4\0\17\160\2\0\1\160\37\0\1\264"+
    "\133\0\1\265\24\0\1\266\43\0\1\267\1\270\61\0"+
    "\1\271\125\0\1\272\30\0\1\273\126\0\1\274\24\0"+
    "\1\275\44\0\1\276\111\0\1\277\102\0\1\300\101\0"+
    "\1\301\54\0\1\302\125\0\1\303\103\0\1\304\16\0"+
    "\1\305\1\0\1\306\1\0\1\307\3\0\1\310\72\0"+
    "\1\311\61\0\1\312\75\0\1\313\133\0\1\314\11\0"+
    "\3\5\5\315\2\0\3\5\1\315\1\0\1\315\1\0"+
    "\2\5\3\0\1\5\2\315\1\5\2\315\2\0\2\5"+
    "\2\315\2\5\13\0\2\5\1\315\1\5\1\315\3\5"+
    "\1\315\7\5\1\0\1\5\1\0\2\75\1\76\3\206"+
    "\1\75\1\206\2\0\4\75\1\0\1\206\1\0\2\75"+
    "\3\0\1\100\5\75\2\0\4\75\1\100\1\75\13\0"+
    "\20\75\1\0\1\75\1\0\3\75\3\207\1\75\1\207"+
    "\2\0\3\75\1\77\1\0\1\207\1\0\2\75\3\0"+
    "\4\75\1\77\1\75\2\0\6\75\13\0\2\75\1\77"+
    "\5\75\1\77\7\75\1\0\1\75\4\0\3\207\1\0"+
    "\1\207\7\0\1\207\62\0\2\75\1\103\1\75\2\211"+
    "\1\75\1\211\2\0\4\75\1\0\1\211\1\0\2\75"+
    "\3\0\1\212\5\75\2\0\4\75\1\212\1\75\13\0"+
    "\20\75\1\0\1\75\1\0\2\75\1\316\1\75\2\213"+
    "\2\75\2\0\4\75\1\0\1\75\1\0\2\75\3\0"+
    "\6\75\2\0\6\75\13\0\20\75\1\0\1\75\1\0"+
    "\2\75\1\317\5\214\2\0\3\75\1\214\1\0\1\214"+
    "\1\0\2\75\3\0\1\212\2\214\1\75\2\214\2\0"+
    "\2\75\2\214\1\212\1\75\13\0\2\75\1\214\1\75"+
    "\1\214\3\75\1\214\7\75\1\0\1\75\1\0\10\215"+
    "\1\111\1\0\74\215\2\220\1\215\1\220\1\216\1\0"+
    "\5\215\1\220\66\215\2\110\1\215\1\110\1\216\1\0"+
    "\5\215\1\110\65\215\5\320\1\111\1\0\3\215\1\320"+
    "\1\215\1\320\7\215\2\320\1\215\2\320\4\215\2\320"+
    "\17\215\1\320\1\215\1\320\3\215\1\320\12\215\11\114"+
    "\1\0\73\114\5\321\2\114\1\223\2\114\1\321\1\224"+
    "\1\321\7\114\2\321\1\114\2\321\4\114\2\321\17\114"+
    "\1\321\1\114\1\321\3\114\1\321\12\114\24\0\1\322"+
    "\55\0\1\5\7\6\2\0\1\74\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\13\0"+
    "\1\6\1\323\15\6\1\5\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\74\1\6\1\324\1\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\13\0"+
    "\17\6\1\5\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\74\1\6\1\325\1\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\13\0\17\6\1\5"+
    "\1\0\1\6\1\0\1\5\7\6\2\0\1\74\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\2\6\1\326\3\6\13\0\17\6\1\5\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\74\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\13\0"+
    "\6\6\1\327\10\6\1\5\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\74\1\330\2\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\13\0\17\6"+
    "\1\5\1\0\1\6\1\0\1\5\7\6\2\0\1\74"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\13\0\7\6\1\331\7\6\1\5\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\74\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\1\6"+
    "\1\332\4\6\13\0\17\6\1\5\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\74\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\1\136\5\6\13\0"+
    "\17\6\1\5\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\74\1\6\1\237\1\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\13\0\17\6\1\5"+
    "\1\0\1\6\1\0\1\5\7\6\2\0\1\74\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\2\6\1\333\3\6\13\0\17\6\1\5\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\74\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\1\334\5\6"+
    "\13\0\17\6\1\5\1\0\1\6\1\0\1\5\7\6"+
    "\2\0\1\74\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\13\0\2\6\1\335\14\6"+
    "\1\5\1\0\1\6\1\0\1\5\7\6\2\0\1\74"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\3\6\1\336\2\6\13\0\17\6\1\5\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\74\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\13\0\3\6\1\337\6\6\1\340\4\6\1\5\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\74\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\1\341"+
    "\5\6\13\0\17\6\1\5\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\74\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\13\0\3\6\1\342"+
    "\13\6\1\5\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\74\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\2\6\1\343\3\6\13\0\17\6\1\5"+
    "\1\0\1\6\1\0\1\5\7\6\2\0\1\74\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\4\6\1\344\1\6\13\0\17\6\1\5\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\74\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\5\6\1\345"+
    "\13\0\17\6\1\5\1\0\1\6\1\0\1\5\7\6"+
    "\2\0\1\74\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\1\6\1\346\4\6\13\0\17\6"+
    "\1\5\1\0\1\6\1\0\1\5\7\6\2\0\1\74"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\13\0\3\6\1\347\13\6\1\5\1\0"+
    "\1\6\1\0\10\5\2\0\1\5\1\350\2\5\1\0"+
    "\1\5\1\0\2\5\3\0\6\5\2\0\6\5\13\0"+
    "\20\5\1\0\1\5\57\0\1\351\63\0\1\256\123\0"+
    "\1\352\54\0\1\353\122\0\1\354\63\0\1\262\123\0"+
    "\1\355\54\0\1\356\102\0\1\357\102\0\1\360\123\0"+
    "\1\361\56\0\1\362\104\0\1\363\21\0\1\364\54\0"+
    "\1\365\102\0\1\366\1\367\55\0\1\370\130\0\1\371"+
    "\120\0\1\372\56\0\1\373\100\0\1\374\101\0\1\375"+
    "\22\0\1\376\57\0\1\377\127\0\1\u0100\74\0\1\u0101"+
    "\101\0\1\u0102\35\0\1\u0103\126\0\1\u0104\116\0\1\u0105"+
    "\63\0\1\311\123\0\1\u0106\54\0\1\u0107\44\0\3\5"+
    "\5\u0108\2\0\3\5\1\u0108\1\0\1\u0108\1\0\2\5"+
    "\3\0\1\5\2\u0108\1\5\2\u0108\2\0\2\5\2\u0108"+
    "\2\5\13\0\2\5\1\u0108\1\5\1\u0108\3\5\1\u0108"+
    "\7\5\1\0\1\5\1\0\2\75\1\317\5\214\2\0"+
    "\3\75\1\214\1\0\1\214\1\0\2\75\3\0\1\75"+
    "\2\214\1\75\2\214\2\0\2\75\2\214\2\75\13\0"+
    "\2\75\1\214\1\75\1\214\3\75\1\214\7\75\1\0"+
    "\1\75\1\0\3\215\5\u0109\1\111\1\0\3\215\1\u0109"+
    "\1\215\1\u0109\7\215\2\u0109\1\215\2\u0109\4\215\2\u0109"+
    "\17\215\1\u0109\1\215\1\u0109\3\215\1\u0109\12\215\3\114"+
    "\5\u010a\2\114\1\223\2\114\1\u010a\1\224\1\u010a\7\114"+
    "\2\u010a\1\114\2\u010a\4\114\2\u010a\17\114\1\u010a\1\114"+
    "\1\u010a\3\114\1\u010a\12\114\1\5\7\6\2\0\1\74"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\1\6\1\u010b\4\6\13\0\17\6\1\5\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\74\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\5\6"+
    "\1\u010c\13\0\17\6\1\5\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\74\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\13\0\13\6\1\341"+
    "\3\6\1\5\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\74\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\13\0\6\6\1\u010d\10\6\1\5"+
    "\1\0\1\6\1\0\1\5\7\6\2\0\1\74\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\6\6\13\0\1\6\1\37\15\6\1\5\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\74\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\13\0"+
    "\6\6\1\u010e\10\6\1\5\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\74\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\2\6\1\u010f\3\6\13\0"+
    "\17\6\1\5\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\74\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\13\0\14\6\1\136\2\6\1\5"+
    "\1\0\1\6\1\0\1\5\7\6\2\0\1\74\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\1\6\1\136\4\6\13\0\17\6\1\5\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\74\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\2\6\1\u0110"+
    "\3\6\13\0\17\6\1\5\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\74\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\5\6\1\341\13\0\17\6"+
    "\1\5\1\0\1\6\1\0\1\5\7\6\2\0\1\74"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\1\u0111\5\6\13\0\17\6\1\5\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\74\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\2\6\1\u0112"+
    "\3\6\13\0\17\6\1\5\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\74\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\13\0\6\6\1\u0113"+
    "\10\6\1\5\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\74\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\13\0\1\6\1\u0114\15\6\1\5"+
    "\1\0\1\6\1\0\1\5\7\6\2\0\1\74\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\1\6\1\u0115\4\6\13\0\17\6\1\5\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\74\1\u0116\2\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\13\0\17\6\1\5\1\0\1\6\1\0\1\5\7\6"+
    "\2\0\1\74\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\13\0\13\6\1\u0117\3\6"+
    "\1\5\1\0\1\6\1\0\1\5\7\6\2\0\1\74"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\13\0\2\6\1\136\14\6\1\5\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\74\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\5\6"+
    "\1\136\13\0\17\6\1\5\1\0\1\6\1\0\3\5"+
    "\5\u0118\2\0\3\5\1\u0118\1\0\1\u0118\1\0\2\5"+
    "\3\0\1\5\2\u0118\1\5\2\u0118\2\0\2\5\2\u0118"+
    "\2\5\13\0\2\5\1\u0118\1\5\1\u0118\3\5\1\u0118"+
    "\7\5\1\0\1\5\25\0\1\u0119\120\0\1\256\12\0"+
    "\1\351\24\0\1\353\1\u011a\5\353\1\u011a\2\0\3\353"+
    "\1\0\1\353\1\0\1\u011a\1\353\1\0\1\353\1\u011a"+
    "\6\353\2\u011a\6\353\1\0\2\u011a\1\0\1\u011a\2\0"+
    "\4\u011a\17\353\2\u011a\1\353\25\0\1\u011b\120\0\1\262"+
    "\12\0\1\354\24\0\1\356\1\u011c\5\356\1\u011c\2\0"+
    "\3\356\1\0\1\356\1\0\1\u011c\1\356\1\0\1\356"+
    "\1\u011c\6\356\2\u011c\6\356\1\0\2\u011c\1\0\1\u011c"+
    "\2\0\4\u011c\17\356\2\u011c\1\356\61\0\1\u011d\61\0"+
    "\1\u011e\17\0\1\u011f\101\0\1\367\34\0\1\u0120\154\0"+
    "\1\u0121\53\0\1\u0122\1\0\1\u0123\116\0\1\u0124\107\0"+
    "\1\u0125\77\0\1\u0126\76\0\1\u0127\60\0\1\u0128\103\0"+
    "\1\u0129\100\0\1\u012a\101\0\1\u012b\101\0\1\u012c\104\0"+
    "\1\u012d\52\0\1\u012e\21\0\1\u012f\126\0\1\u0130\77\0"+
    "\1\u0131\77\0\1\u0132\64\0\1\u0133\63\0\1\u0134\120\0"+
    "\1\311\12\0\1\u0105\24\0\1\u0107\1\u0135\5\u0107\1\u0135"+
    "\2\0\3\u0107\1\0\1\u0107\1\0\1\u0135\1\u0107\1\0"+
    "\1\u0107\1\u0135\6\u0107\2\u0135\6\u0107\1\0\2\u0135\1\0"+
    "\1\u0135\2\0\4\u0135\17\u0107\2\u0135\1\u0107\1\0\3\5"+
    "\5\u0136\2\0\3\5\1\u0136\1\0\1\u0136\1\0\2\5"+
    "\3\0\1\5\2\u0136\1\5\2\u0136\2\0\2\5\2\u0136"+
    "\2\5\13\0\2\5\1\u0136\1\5\1\u0136\3\5\1\u0136"+
    "\7\5\1\0\1\5\1\0\3\215\5\u0137\1\111\1\0"+
    "\3\215\1\u0137\1\215\1\u0137\7\215\2\u0137\1\215\2\u0137"+
    "\4\215\2\u0137\17\215\1\u0137\1\215\1\u0137\3\215\1\u0137"+
    "\12\215\3\114\5\u0138\2\114\1\223\2\114\1\u0138\1\224"+
    "\1\u0138\7\114\2\u0138\1\114\2\u0138\4\114\2\u0138\17\114"+
    "\1\u0138\1\114\1\u0138\3\114\1\u0138\12\114\1\5\7\6"+
    "\2\0\1\74\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\2\6\1\136\3\6\13\0\17\6"+
    "\1\5\1\0\1\6\1\0\1\5\7\6\2\0\1\74"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\13\0\6\6\1\131\10\6\1\5\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\74\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\13\0\12\6\1\u0139\4\6\1\5\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\74\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\1\6\1\u013a\4\6"+
    "\13\0\17\6\1\5\1\0\1\6\1\0\1\5\7\6"+
    "\2\0\1\74\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\1\6\1\u013b\4\6\13\0\17\6"+
    "\1\5\1\0\1\6\1\0\1\5\7\6\2\0\1\74"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\13\0\4\6\1\u013c\12\6\1\5\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\74\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\13\0\14\6\1\u013d\2\6\1\5\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\74\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\1\6\1\u013e\4\6"+
    "\13\0\17\6\1\5\1\0\1\6\1\0\1\5\7\6"+
    "\2\0\1\74\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\13\0\2\6\1\u013a\14\6"+
    "\1\5\1\0\1\6\1\0\1\5\7\6\2\0\1\74"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\5\6\1\u013f\13\0\17\6\1\5\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\74\1\6\1\u0140\1\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\6\6\13\0\17\6\1\5\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\74\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\13\0\2\6\1\u0139"+
    "\14\6\1\5\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\74\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\2\6\1\341\3\6\13\0\17\6\1\5"+
    "\1\0\1\6\1\0\3\5\5\u0141\2\0\3\5\1\u0141"+
    "\1\0\1\u0141\1\0\2\5\3\0\1\5\2\u0141\1\5"+
    "\2\u0141\2\0\2\5\2\u0141\2\5\13\0\2\5\1\u0141"+
    "\1\5\1\u0141\3\5\1\u0141\7\5\1\0\1\5\25\0"+
    "\1\353\101\0\1\356\114\0\1\u0142\103\0\1\u0143\130\0"+
    "\1\u0144\50\0\1\u0145\124\0\1\u0146\101\0\1\u0147\32\0"+
    "\1\u0148\146\0\1\u0149\62\0\1\u014a\100\0\1\367\103\0"+
    "\1\u014b\77\0\1\u014c\127\0\1\367\105\0\1\u014d\46\0"+
    "\1\u014e\126\0\1\367\102\0\1\u014f\111\0\1\u0150\44\0"+
    "\1\u0151\135\0\1\u0152\45\0\1\u0150\101\0\1\u0153\54\0"+
    "\1\u0131\112\0\1\u0107\55\0\3\5\5\6\2\0\3\5"+
    "\1\6\1\0\1\6\1\0\2\5\3\0\1\5\2\6"+
    "\1\5\2\6\2\0\2\5\2\6\2\5\13\0\2\5"+
    "\1\6\1\5\1\6\3\5\1\6\7\5\1\0\1\5"+
    "\1\0\3\215\5\110\1\111\1\0\3\215\1\110\1\215"+
    "\1\110\7\215\2\110\1\215\2\110\4\215\2\110\17\215"+
    "\1\110\1\215\1\110\3\215\1\110\12\215\3\114\5\13"+
    "\2\114\1\223\2\114\1\13\1\224\1\13\7\114\2\13"+
    "\1\114\2\13\4\114\2\13\17\114\1\13\1\114\1\13"+
    "\3\114\1\13\12\114\1\5\7\6\2\0\1\74\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\2\6\1\335\3\6\13\0\17\6\1\5\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\74\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\2\6\1\u0154"+
    "\3\6\13\0\17\6\1\5\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\74\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\3\6\1\u0155\2\6\13\0"+
    "\17\6\1\5\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\74\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\13\0\1\u0156\16\6\1\5\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\74\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\13\0\3\6\1\u0117\13\6\1\5\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\74\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\1\u0157\5\6\13\0"+
    "\17\6\1\5\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\74\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\13\0\6\6\1\u0158\10\6\1\5"+
    "\1\0\1\6\1\0\1\5\7\6\2\0\1\74\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\3\6\1\u0159\2\6\13\0\17\6\1\5\1\0\1\6"+
    "\1\0\3\5\5\u015a\2\0\3\5\1\u015a\1\0\1\u015a"+
    "\1\0\2\5\3\0\1\5\2\u015a\1\5\2\u015a\2\0"+
    "\2\5\2\u015a\2\5\13\0\2\5\1\u015a\1\5\1\u015a"+
    "\3\5\1\u015a\7\5\1\0\1\5\66\0\1\u015b\75\0"+
    "\1\u015c\63\0\1\367\52\0\1\367\127\0\1\u0126\75\0"+
    "\1\u012d\124\0\1\u0126\57\0\1\367\104\0\1\u015d\77\0"+
    "\1\u015e\124\0\1\u015f\76\0\1\u0160\35\0\1\u015b\145\0"+
    "\1\u0145\21\0\44\u0150\1\367\35\u0150\37\0\1\u0161\122\0"+
    "\1\u0162\60\0\1\u0163\42\0\1\5\7\6\2\0\1\74"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\13\0\2\6\1\341\14\6\1\5\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\74\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\1\u0164"+
    "\5\6\13\0\17\6\1\5\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\74\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\3\6\1\u0165\2\6\13\0"+
    "\17\6\1\5\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\74\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\13\0\14\6\1\341\2\6\1\5"+
    "\1\0\1\6\1\0\1\5\7\6\2\0\1\74\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\1\u010b\5\6\13\0\17\6\1\5\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\74\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\4\6\1\136\1\6"+
    "\13\0\17\6\1\5\1\0\1\6\1\0\3\5\5\147"+
    "\2\0\3\5\1\147\1\0\1\147\1\0\2\5\3\0"+
    "\1\5\2\147\1\5\2\147\2\0\2\5\2\147\2\5"+
    "\13\0\2\5\1\147\1\5\1\147\3\5\1\147\7\5"+
    "\1\0\1\5\42\0\1\u0166\103\0\1\u0167\70\0\1\u0168"+
    "\34\0\1\u0169\50\0\1\u0126\104\0\1\u016a\77\0\1\u016b"+
    "\103\0\1\u016c\120\0\1\u016d\106\0\1\u016e\14\0\1\5"+
    "\7\6\2\0\1\74\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\13\0\6\6\1\u016f"+
    "\10\6\1\5\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\74\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\1\6\1\237\4\6\13\0\17\6\1\5"+
    "\1\0\1\6\43\0\1\367\100\0\1\u0170\125\0\1\u0171"+
    "\55\0\1\u0172\76\0\1\u0173\136\0\1\367\50\0\1\u0150"+
    "\75\0\1\u0150\101\0\1\u0174\43\0\1\5\7\6\2\0"+
    "\1\74\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\13\0\1\6\1\u0175\15\6\1\5"+
    "\1\0\1\6\16\0\1\u0176\124\0\1\u0177\77\0\1\u0178"+
    "\103\0\1\u0179\130\0\1\u017a\12\0\1\5\7\6\2\0"+
    "\1\74\1\6\1\341\1\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\13\0\17\6\1\5"+
    "\1\0\1\6\41\0\1\u017b\103\0\1\u0179\100\0\1\367"+
    "\121\0\1\367\100\0\1\u017c\57\0\1\u016b\126\0\1\u0150"+
    "\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23232];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\5\1\1\11\1\1\1\11\13\1\2\11\3\1"+
    "\1\11\13\1\1\11\5\1\1\11\10\1\1\11\20\1"+
    "\1\11\1\0\3\1\2\11\14\1\1\0\13\1\2\0"+
    "\1\11\4\0\1\11\2\0\1\11\22\0\3\1\1\0"+
    "\5\1\1\11\5\1\1\11\31\1\37\0\5\1\1\11"+
    "\26\1\2\0\1\1\2\0\1\1\10\0\1\11\17\0"+
    "\22\1\35\0\14\1\22\0\7\1\2\0\1\1\6\0"+
    "\2\1\11\0\1\1\5\0\1\1\7\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  
  
  /**
   * Constructor.  This must be here because JFlex does not generate a
   * no-parameter constructor.
   */
  public ThingMLTokenMaker() {
  }
  
  
  /**
   * Adds the token specified to the current linked list of tokens.
   *
   * @param tokenType The token's type.
   * @see #addToken(int, int, int)
   */
  private void addHyperlinkToken(int start, int end, int tokenType) {
    int so = start + offsetShift;
    addToken(zzBuffer, start,end, tokenType, so, true);
  }
  
  
  /**
   * Adds the token specified to the current linked list of tokens.
   *
   * @param tokenType The token's type.
   */
  private void addToken(int tokenType) {
    addToken(zzStartRead, zzMarkedPos-1, tokenType);
  }
  
  
  /**
   * Adds the token specified to the current linked list of tokens.
   *
   * @param tokenType The token's type.
   * @see #addHyperlinkToken(int, int, int)
   */
  private void addToken(int start, int end, int tokenType) {
    int so = start + offsetShift;
    addToken(zzBuffer, start,end, tokenType, so, false);
  }
  
  
  /**
   * Adds the token specified to the current linked list of tokens.
   *
   * @param array The character array.
   * @param start The starting offset in the array.
   * @param end The ending offset in the array.
   * @param tokenType The token's type.
   * @param startOffset The offset in the document at which this token
   *                    occurs.
   * @param hyperlink Whether this token is a hyperlink.
   */
  public void addToken(char[] array, int start, int end, int tokenType,
		       int startOffset, boolean hyperlink) {
    super.addToken(array, start,end, tokenType, startOffset, hyperlink);
    zzStartRead = zzMarkedPos;
  }
  
  
  /**
   * Returns the text to place at the beginning and end of a
   * line to "comment" it in a this programming language.
   *
   * @return The start and end strings to add to a line to "comment"
   *         it out.
   */
  public String[] getLineCommentStartAndEnd() {
    return new String[] { "//", null };
  }
  
  
  /**
   * Returns the first token in the linked list of tokens generated
   * from <code>text</code>.  This method must be implemented by
   * subclasses so they can correctly implement syntax highlighting.
   *
   * @param text The text from which to get tokens.
   * @param initialTokenType The token type we should start with.
   * @param startOffset The offset into the document at which
   *        <code>text</code> starts.
   * @return The first <code>Token</code> in a linked list representing
   *         the syntax highlighted text.
   */
  public Token getTokenList(Segment text, int initialTokenType, int startOffset) {
    
    resetTokenList();
    this.offsetShift = -text.offset + startOffset;
    
    // Start off in the proper state.
    int state = Token.NULL;
    switch (initialTokenType) {
    case Token.COMMENT_MULTILINE:
      state = MLC;
      start = text.offset;
      break;
    case Token.COMMENT_DOCUMENTATION:
      state = DOCCOMMENT;
      start = text.offset;
      break;
    default:
      state = Token.NULL;
    }
    
    s = text;
    try {
      yyreset(zzReader);
      yybegin(state);
      return yylex();
    } catch (IOException ioe) {
      ioe.printStackTrace();
      return new DefaultToken();
    }
  }
  
  
  /**
   * Refills the input buffer.
   *
   * @return      <code>true</code> if EOF was reached, otherwise
   *              <code>false</code>.
   * @exception   IOException  if any I/O-Error occurs.
   */
  private boolean zzRefill() throws java.io.IOException {
    return zzCurrentPos>=s.offset+s.count;
  }
  
  
  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) throws java.io.IOException {
    // 's' has been updated.
    zzBuffer = s.array;
    /*
     * We replaced the line below with the two below it because zzRefill
     * no longer "refills" the buffer (since the way we do it, it's always
     * "full" the first time through, since it points to the segment's
     * array).  So, we assign zzEndRead here.
     */
    // zzStartRead = zzEndRead = s.offset;
    zzStartRead = s.offset;
    zzEndRead = zzStartRead + s.count - 1;
    // zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
    zzCurrentPos = zzMarkedPos = s.offset;	
    zzLexicalState = YYINITIAL;
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
  }
  
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ThingMLTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ThingMLTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }
    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
          }
        case 35: break;
        case 5: 
          { addNullToken(); return firstToken;
          }
        case 36: break;
        case 33: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.COMMENT_KEYWORD); start = zzMarkedPos;
          }
        case 37: break;
        case 10: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 38: break;
        case 24: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 39: break;
        case 29: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 40: break;
        case 22: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 41: break;
        case 7: 
          { addToken(Token.WHITESPACE);
          }
        case 42: break;
        case 18: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 43: break;
        case 27: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 44: break;
        case 17: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 45: break;
        case 30: 
          { addToken(Token.RESERVED_WORD);
          }
        case 46: break;
        case 9: 
          { addToken(Token.SEPARATOR);
          }
        case 47: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 48: break;
        case 15: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 49: break;
        case 21: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 50: break;
        case 23: 
          { addToken(Token.FUNCTION);
          }
        case 51: break;
        case 4: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 52: break;
        case 6: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 53: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 54: break;
        case 19: 
          { addToken(Token.ERROR_CHAR);
          }
        case 55: break;
        case 14: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); return firstToken;
          }
        case 56: break;
        case 11: 
          { addToken(Token.ANNOTATION);
          }
        case 57: break;
        case 28: 
          { start = zzMarkedPos-3; yybegin(DOCCOMMENT);
          }
        case 58: break;
        case 20: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 59: break;
        case 34: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 60: break;
        case 26: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.COMMENT_MARKUP); start = zzMarkedPos;
          }
        case 61: break;
        case 31: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 62: break;
        case 25: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_DOCUMENTATION);
          }
        case 63: break;
        case 16: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 64: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 65: break;
        case 8: 
          { addToken(Token.OPERATOR);
          }
        case 66: break;
        case 12: 
          { 
          }
        case 67: break;
        case 13: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 68: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 381: break;
            case DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); return firstToken;
            }
            case 382: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 383: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 384: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
